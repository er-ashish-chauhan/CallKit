"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importDefault(require("react"));
const react_native_1 = require("react-native");
const country_1 = __importDefault(require("./country"));
const flags_1 = __importDefault(require("./resources/flags"));
const phoneNumber_1 = __importDefault(require("./phoneNumber"));
const styles_1 = __importDefault(require("./styles"));
const CountryPicker_1 = __importDefault(require("./CountryPicker"));
class PhoneInput extends react_1.default.Component {
    constructor(props) {
        super(props);
        this.onChangePhoneNumber = (number) => {
            const actionAfterSetState = this.props.onChangePhoneNumber
                ? (displayValue, iso2) => {
                    var _a, _b;
                    (_b = (_a = this.props).onChangePhoneNumber) === null || _b === void 0 ? void 0 : _b.call(_a, displayValue, iso2);
                }
                : null;
            this.updateValue(number, actionAfterSetState);
        };
        this.onPressFlag = () => {
            if (this.props.onPressFlag) {
                this.props.onPressFlag();
            }
            else {
                if (this.state.iso2)
                    this.picker.selectCountry(this.state.iso2);
                this.picker.show();
            }
        };
        // eslint-disable-next-line class-methods-use-this
        this.getFlag = (iso2) => flags_1.default.get(iso2);
        this.getISOCode = () => this.state.iso2;
        this.selectCountry = (iso2) => {
            if (this.state.iso2 !== iso2) {
                const countryData = phoneNumber_1.default.getCountryDataByCode(iso2);
                if (countryData) {
                    this.setState({
                        iso2,
                        displayValue: this.format(`+${countryData.dialCode}`),
                        value: `+${countryData.dialCode}`
                    }, () => {
                        if (this.props.onSelectCountry)
                            this.props.onSelectCountry(iso2);
                    });
                }
            }
        };
        this.setValue = (number) => {
            if (this.state.value !== number) {
                this.updateValue(number);
            }
        };
        let { initialCountry, initialValue } = this.props;
        const { countriesList, disabled, } = this.props;
        if (countriesList) {
            country_1.default.setCustomCountriesData(countriesList);
        }
        let displayValue = '';
        if (initialValue) {
            if (initialValue[0] !== '+') {
                initialValue = `+${initialValue}`;
            }
            initialCountry = phoneNumber_1.default.getCountryCodeOfNumber(initialValue);
            displayValue = this.format(initialValue, initialCountry);
        }
        else {
            const countryData = phoneNumber_1.default.getCountryDataByCode(initialCountry);
            initialValue = countryData ? `+${countryData.dialCode}` : '';
            displayValue = initialValue;
        }
        this.state = {
            disabled,
            iso2: initialCountry,
            displayValue,
            value: initialValue,
        };
    }
    static setCustomCountriesData(json) {
        country_1.default.setCustomCountriesData(json);
    }
    componentDidUpdate() {
        const { disabled } = this.props;
        if (disabled !== this.state.disabled) {
            this.setState({ disabled }); // eslint-disable-line react/no-did-update-set-state
        }
    }
    // eslint-disable-next-line class-methods-use-this
    getPickerData() {
        return phoneNumber_1.default.getAllCountries().map((country, index) => ({
            key: index,
            image: flags_1.default.get(country.iso2),
            label: country.name,
            dialCode: `+${country.dialCode}`,
            iso2: country.iso2
        }));
    }
    getCountryCode() {
        const countryData = phoneNumber_1.default.getCountryDataByCode(this.state.iso2);
        return countryData ? countryData.dialCode : null;
    }
    // eslint-disable-next-line class-methods-use-this
    getAllCountries() {
        return phoneNumber_1.default.getAllCountries();
    }
    getDialCode() {
        return phoneNumber_1.default.getDialCode(this.state.value);
    }
    getValue(text) {
        return text ? text.replace(/[^0-9]/g, '') : this.state.value;
    }
    getNumberType() {
        return phoneNumber_1.default.getNumberType(this.state.value, this.state.iso2);
    }
    isValidNumber() {
        if (this.state.value.length < 4)
            return false;
        return phoneNumber_1.default.isValidNumber(this.state.value, this.state.iso2);
    }
    format(text, iso2) {
        return this.props.autoFormat
            ? phoneNumber_1.default.format(text, iso2 || this.state.iso2)
            : text;
    }
    updateValue(number, actionAfterSetState = null) {
        let modifiedNumber = this.getValue(number);
        const { allowZeroAfterCountryCode } = this.props;
        if (modifiedNumber[0] !== '+' && number.length) {
            modifiedNumber = `+${modifiedNumber}`;
        }
        modifiedNumber = allowZeroAfterCountryCode
            ? modifiedNumber
            : this.possiblyEliminateZeroAfterCountryCode(modifiedNumber);
        const iso2 = phoneNumber_1.default.getCountryCodeOfNumber(modifiedNumber);
        const displayValue = this.format(modifiedNumber);
        this.setState({
            iso2,
            displayValue,
            value: modifiedNumber,
        }, () => {
            if (actionAfterSetState) {
                actionAfterSetState(displayValue, iso2);
            }
        });
    }
    // eslint-disable-next-line class-methods-use-this
    possiblyEliminateZeroAfterCountryCode(number) {
        const dialCode = phoneNumber_1.default.getDialCode(number);
        return number.startsWith(`${dialCode}0`)
            ? dialCode + number.substr(dialCode.length + 1)
            : number;
    }
    focus() {
        this.inputPhone.focus();
    }
    blur() {
        this.inputPhone.blur();
    }
    render() {
        const { iso2, displayValue, disabled } = this.state;
        const TextComponent = this.props.textComponent || react_native_1.TextInput;
        return (react_1.default.createElement(react_native_1.View, { style: [styles_1.default.container, this.props.style] },
            react_1.default.createElement(react_native_1.TouchableWithoutFeedback, { onPress: this.onPressFlag, disabled: disabled },
                react_1.default.createElement(react_native_1.Image, { source: flags_1.default.get(iso2), style: [styles_1.default.flag, this.props.flagStyle] })),
            react_1.default.createElement(react_native_1.View, { style: { flex: 1, marginLeft: this.props.offset || 10 } },
                react_1.default.createElement(TextComponent, Object.assign({ ref: (ref) => {
                        this.inputPhone = ref;
                    }, editable: !disabled, autoCorrect: false, style: [styles_1.default.text, this.props.textStyle], onChangeText: (text) => {
                        this.onChangePhoneNumber(text);
                    }, keyboardType: "phone-pad", underlineColorAndroid: "rgba(0,0,0,0)", value: displayValue }, this.props.textProps))),
            react_1.default.createElement(CountryPicker_1.default, { ref: (ref) => {
                    this.picker = ref;
                }, selectedCountry: iso2, onSubmit: this.selectCountry, buttonColor: this.props.pickerButtonColor, cancelText: this.props.cancelText, cancelTextStyle: this.props.cancelTextStyle, confirmText: this.props.confirmText, confirmTextStyle: this.props.confirmTextStyle, pickerBackgroundColor: this.props.pickerBackgroundColor, itemStyle: this.props.pickerItemStyle, onPressCancel: this.props.onPressCancel, onPressConfirm: this.props.onPressConfirm })));
    }
}
exports.default = PhoneInput;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUGhvbmVJbnB1dC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9QaG9uZUlucHV0LnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLGtEQUEwQjtBQUMxQiwrQ0FFc0I7QUFDdEIsd0RBQWdDO0FBQ2hDLDhEQUFzQztBQUN0QyxnRUFBd0M7QUFDeEMsc0RBQThCO0FBQzlCLG9FQUE0QztBQUc1QyxNQUFxQixVQUNqQixTQUFRLGVBQUssQ0FBQyxTQUE2RDtJQVMzRSxZQUFZLEtBQUs7UUFDYixLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7UUE0Q2pCLHdCQUFtQixHQUFHLENBQUMsTUFBTSxFQUFFLEVBQUU7WUFDN0IsTUFBTSxtQkFBbUIsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLG1CQUFtQjtnQkFDdEQsQ0FBQyxDQUFDLENBQUMsWUFBb0IsRUFBRSxJQUFZLEVBQUUsRUFBRTs7b0JBQ2pDLE1BQUEsTUFBQSxJQUFJLENBQUMsS0FBSyxFQUFDLG1CQUFtQixtREFBRyxZQUFZLEVBQUUsSUFBSSxFQUFFO2dCQUM3RCxDQUFDO2dCQUNELENBQUMsQ0FBQyxJQUFJLENBQUM7WUFDWCxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sRUFBRSxtQkFBbUIsQ0FBQyxDQUFDO1FBQ2xELENBQUMsQ0FBQTtRQUVELGdCQUFXLEdBQUcsR0FBRyxFQUFFO1lBQ2YsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsRUFBRTtnQkFDeEIsSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLEVBQUUsQ0FBQzthQUM1QjtpQkFBTTtnQkFDSCxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSTtvQkFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNoRSxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxDQUFDO2FBQ3RCO1FBQ0wsQ0FBQyxDQUFBO1FBdUJE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QyxLQUFLLENBQUMsV0FBVyxFQUNuQyxnQkFBZ0IsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLGdCQUFnQixFQUM3QyxxQkFBcUIsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLHFCQUFxQixFQUN2RCxTQUFTLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxlQUFlLEVBQ3JDLGFBQWEsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLGFBQWEsRUFDdkMsY0FBYyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsY0FBYyxHQUMzQyxDQUNDLENBQ1YsQ0FBQztJQUNOLENBQUM7Q0FDSjtBQXBQRCw2QkFvUEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHtcbiAgICBJbWFnZSwgVGV4dElucHV0LCBUb3VjaGFibGVXaXRob3V0RmVlZGJhY2ssIFZpZXdcbn0gZnJvbSAncmVhY3QtbmF0aXZlJztcbmltcG9ydCBDb3VudHJ5IGZyb20gJy4vY291bnRyeSc7XG5pbXBvcnQgRmxhZ3MgZnJvbSAnLi9yZXNvdXJjZXMvZmxhZ3MnO1xuaW1wb3J0IFBob25lTnVtYmVyIGZyb20gJy4vcGhvbmVOdW1iZXInO1xuaW1wb3J0IHN0eWxlcyBmcm9tICcuL3N0eWxlcyc7XG5pbXBvcnQgQ291bnRyeVBpY2tlciBmcm9tICcuL0NvdW50cnlQaWNrZXInO1xuaW1wb3J0IHsgUmVhY3ROYXRpdmVQaG9uZUlucHV0UHJvcHMgfSBmcm9tICcuL3R5cGluZ3MnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQaG9uZUlucHV0PFRleHRDb21wb25lbnRUeXBlIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50VHlwZSA9IHR5cGVvZiBUZXh0SW5wdXQ+XG4gICAgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8UmVhY3ROYXRpdmVQaG9uZUlucHV0UHJvcHM8VGV4dENvbXBvbmVudFR5cGU+LCBhbnk+IHtcbiAgICBzdGF0aWMgc2V0Q3VzdG9tQ291bnRyaWVzRGF0YShqc29uKSB7XG4gICAgICAgIENvdW50cnkuc2V0Q3VzdG9tQ291bnRyaWVzRGF0YShqc29uKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHBpY2tlcjogYW55O1xuXG4gICAgcHJpdmF0ZSBpbnB1dFBob25lOiBhbnk7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgICAgICBzdXBlcihwcm9wcyk7XG5cbiAgICAgICAgbGV0IHtcbiAgICAgICAgICAgIGluaXRpYWxDb3VudHJ5LCBpbml0aWFsVmFsdWVcbiAgICAgICAgfSA9IHRoaXMucHJvcHM7XG5cbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgY291bnRyaWVzTGlzdCwgZGlzYWJsZWQsXG4gICAgICAgIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgICAgIGlmIChjb3VudHJpZXNMaXN0KSB7XG4gICAgICAgICAgICBDb3VudHJ5LnNldEN1c3RvbUNvdW50cmllc0RhdGEoY291bnRyaWVzTGlzdCk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgZGlzcGxheVZhbHVlID0gJyc7XG5cbiAgICAgICAgaWYgKGluaXRpYWxWYWx1ZSkge1xuICAgICAgICAgICAgaWYgKGluaXRpYWxWYWx1ZVswXSAhPT0gJysnKSB7XG4gICAgICAgICAgICAgICAgaW5pdGlhbFZhbHVlID0gYCske2luaXRpYWxWYWx1ZX1gO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpbml0aWFsQ291bnRyeSA9IFBob25lTnVtYmVyLmdldENvdW50cnlDb2RlT2ZOdW1iZXIoaW5pdGlhbFZhbHVlKTtcbiAgICAgICAgICAgIGRpc3BsYXlWYWx1ZSA9IHRoaXMuZm9ybWF0KGluaXRpYWxWYWx1ZSwgaW5pdGlhbENvdW50cnkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgY291bnRyeURhdGEgPSBQaG9uZU51bWJlci5nZXRDb3VudHJ5RGF0YUJ5Q29kZShpbml0aWFsQ291bnRyeSk7XG4gICAgICAgICAgICBpbml0aWFsVmFsdWUgPSBjb3VudHJ5RGF0YSA/IGArJHtjb3VudHJ5RGF0YS5kaWFsQ29kZX1gIDogJyc7XG4gICAgICAgICAgICBkaXNwbGF5VmFsdWUgPSBpbml0aWFsVmFsdWU7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgICAgICAgZGlzYWJsZWQsXG4gICAgICAgICAgICBpc28yOiBpbml0aWFsQ291bnRyeSxcbiAgICAgICAgICAgIGRpc3BsYXlWYWx1ZSxcbiAgICAgICAgICAgIHZhbHVlOiBpbml0aWFsVmFsdWUsXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgY29tcG9uZW50RGlkVXBkYXRlKCkge1xuICAgICAgICBjb25zdCB7IGRpc2FibGVkIH0gPSB0aGlzLnByb3BzO1xuICAgICAgICBpZiAoZGlzYWJsZWQgIT09IHRoaXMuc3RhdGUuZGlzYWJsZWQpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoeyBkaXNhYmxlZCB9KTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSByZWFjdC9uby1kaWQtdXBkYXRlLXNldC1zdGF0ZVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgb25DaGFuZ2VQaG9uZU51bWJlciA9IChudW1iZXIpID0+IHtcbiAgICAgICAgY29uc3QgYWN0aW9uQWZ0ZXJTZXRTdGF0ZSA9IHRoaXMucHJvcHMub25DaGFuZ2VQaG9uZU51bWJlclxuICAgICAgICAgICAgPyAoZGlzcGxheVZhbHVlOiBzdHJpbmcsIGlzbzI6IHN0cmluZykgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnByb3BzLm9uQ2hhbmdlUGhvbmVOdW1iZXI/LihkaXNwbGF5VmFsdWUsIGlzbzIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgOiBudWxsO1xuICAgICAgICB0aGlzLnVwZGF0ZVZhbHVlKG51bWJlciwgYWN0aW9uQWZ0ZXJTZXRTdGF0ZSk7XG4gICAgfVxuXG4gICAgb25QcmVzc0ZsYWcgPSAoKSA9PiB7XG4gICAgICAgIGlmICh0aGlzLnByb3BzLm9uUHJlc3NGbGFnKSB7XG4gICAgICAgICAgICB0aGlzLnByb3BzLm9uUHJlc3NGbGFnKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAodGhpcy5zdGF0ZS5pc28yKSB0aGlzLnBpY2tlci5zZWxlY3RDb3VudHJ5KHRoaXMuc3RhdGUuaXNvMik7XG4gICAgICAgICAgICB0aGlzLnBpY2tlci5zaG93KCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY2xhc3MtbWV0aG9kcy11c2UtdGhpc1xuICAgIGdldFBpY2tlckRhdGEoKSB7XG4gICAgICAgIHJldHVybiBQaG9uZU51bWJlci5nZXRBbGxDb3VudHJpZXMoKS5tYXAoKGNvdW50cnksIGluZGV4KSA9PiAoe1xuICAgICAgICAgICAga2V5OiBpbmRleCxcbiAgICAgICAgICAgIGltYWdlOiBGbGFncy5nZXQoY291bnRyeS5pc28yKSxcbiAgICAgICAgICAgIGxhYmVsOiBjb3VudHJ5Lm5hbWUsXG4gICAgICAgICAgICBkaWFsQ29kZTogYCske2NvdW50cnkuZGlhbENvZGV9YCxcbiAgICAgICAgICAgIGlzbzI6IGNvdW50cnkuaXNvMlxuICAgICAgICB9KSk7XG4gICAgfVxuXG4gICAgZ2V0Q291bnRyeUNvZGUoKSB7XG4gICAgICAgIGNvbnN0IGNvdW50cnlEYXRhID0gUGhvbmVOdW1iZXIuZ2V0Q291bnRyeURhdGFCeUNvZGUodGhpcy5zdGF0ZS5pc28yKTtcbiAgICAgICAgcmV0dXJuIGNvdW50cnlEYXRhID8gY291bnRyeURhdGEuZGlhbENvZGUgOiBudWxsO1xuICAgIH1cblxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjbGFzcy1tZXRob2RzLXVzZS10aGlzXG4gICAgZ2V0QWxsQ291bnRyaWVzKCkge1xuICAgICAgICByZXR1cm4gUGhvbmVOdW1iZXIuZ2V0QWxsQ291bnRyaWVzKCk7XG4gICAgfVxuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNsYXNzLW1ldGhvZHMtdXNlLXRoaXNcbiAgICBnZXRGbGFnID0gKGlzbzIpID0+IEZsYWdzLmdldChpc28yKTtcblxuICAgIGdldERpYWxDb2RlKCkge1xuICAgICAgICByZXR1cm4gUGhvbmVOdW1iZXIuZ2V0RGlhbENvZGUodGhpcy5zdGF0ZS52YWx1ZSk7XG4gICAgfVxuXG4gICAgZ2V0VmFsdWUodGV4dD8pIHtcbiAgICAgICAgcmV0dXJuIHRleHQgPyB0ZXh0LnJlcGxhY2UoL1teMC05XS9nLCAnJykgOiB0aGlzLnN0YXRlLnZhbHVlO1xuICAgIH1cblxuICAgIGdldE51bWJlclR5cGUoKSB7XG4gICAgICAgIHJldHVybiBQaG9uZU51bWJlci5nZXROdW1iZXJUeXBlKFxuICAgICAgICAgICAgdGhpcy5zdGF0ZS52YWx1ZSxcbiAgICAgICAgICAgIHRoaXMuc3RhdGUuaXNvMlxuICAgICAgICApO1xuICAgIH1cblxuICAgIGdldElTT0NvZGUgPSAoKSA9PiB0aGlzLnN0YXRlLmlzbzI7XG5cbiAgICBzZWxlY3RDb3VudHJ5ID0gKGlzbzIpID0+IHtcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUuaXNvMiAhPT0gaXNvMikge1xuICAgICAgICAgICAgY29uc3QgY291bnRyeURhdGEgPSBQaG9uZU51bWJlci5nZXRDb3VudHJ5RGF0YUJ5Q29kZShpc28yKTtcbiAgICAgICAgICAgIGlmIChjb3VudHJ5RGF0YSkge1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzbzIsXG4gICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5VmFsdWU6IHRoaXMuZm9ybWF0KGArJHtjb3VudHJ5RGF0YS5kaWFsQ29kZX1gKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBgKyR7Y291bnRyeURhdGEuZGlhbENvZGV9YFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5wcm9wcy5vblNlbGVjdENvdW50cnkpIHRoaXMucHJvcHMub25TZWxlY3RDb3VudHJ5KGlzbzIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHNldFZhbHVlID0gKG51bWJlcikgPT4ge1xuICAgICAgICBpZiAodGhpcy5zdGF0ZS52YWx1ZSAhPT0gbnVtYmVyKSB7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVZhbHVlKG51bWJlcik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpc1ZhbGlkTnVtYmVyKCkge1xuICAgICAgICBpZiAodGhpcy5zdGF0ZS52YWx1ZS5sZW5ndGggPCA0KSByZXR1cm4gZmFsc2U7XG4gICAgICAgIHJldHVybiBQaG9uZU51bWJlci5pc1ZhbGlkTnVtYmVyKFxuICAgICAgICAgICAgdGhpcy5zdGF0ZS52YWx1ZSxcbiAgICAgICAgICAgIHRoaXMuc3RhdGUuaXNvMlxuICAgICAgICApO1xuICAgIH1cblxuICAgIGZvcm1hdCh0ZXh0LCBpc28yPykge1xuICAgICAgICByZXR1cm4gdGhpcy5wcm9wcy5hdXRvRm9ybWF0XG4gICAgICAgICAgICA/IFBob25lTnVtYmVyLmZvcm1hdCh0ZXh0LCBpc28yIHx8IHRoaXMuc3RhdGUuaXNvMilcbiAgICAgICAgICAgIDogdGV4dDtcbiAgICB9XG5cbiAgICB1cGRhdGVWYWx1ZShudW1iZXIsIGFjdGlvbkFmdGVyU2V0U3RhdGU6IGFueSA9IG51bGwpIHtcbiAgICAgICAgbGV0IG1vZGlmaWVkTnVtYmVyID0gdGhpcy5nZXRWYWx1ZShudW1iZXIpO1xuICAgICAgICBjb25zdCB7IGFsbG93WmVyb0FmdGVyQ291bnRyeUNvZGUgfSA9IHRoaXMucHJvcHM7XG5cbiAgICAgICAgaWYgKG1vZGlmaWVkTnVtYmVyWzBdICE9PSAnKycgJiYgbnVtYmVyLmxlbmd0aCkge1xuICAgICAgICAgICAgbW9kaWZpZWROdW1iZXIgPSBgKyR7bW9kaWZpZWROdW1iZXJ9YDtcbiAgICAgICAgfVxuICAgICAgICBtb2RpZmllZE51bWJlciA9IGFsbG93WmVyb0FmdGVyQ291bnRyeUNvZGVcbiAgICAgICAgICAgID8gbW9kaWZpZWROdW1iZXJcbiAgICAgICAgICAgIDogdGhpcy5wb3NzaWJseUVsaW1pbmF0ZVplcm9BZnRlckNvdW50cnlDb2RlKG1vZGlmaWVkTnVtYmVyKTtcbiAgICAgICAgY29uc3QgaXNvMjogc3RyaW5nID0gUGhvbmVOdW1iZXIuZ2V0Q291bnRyeUNvZGVPZk51bWJlcihtb2RpZmllZE51bWJlcik7XG5cbiAgICAgICAgY29uc3QgZGlzcGxheVZhbHVlID0gdGhpcy5mb3JtYXQobW9kaWZpZWROdW1iZXIpO1xuXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgaXNvMixcbiAgICAgICAgICAgIGRpc3BsYXlWYWx1ZSxcbiAgICAgICAgICAgIHZhbHVlOiBtb2RpZmllZE51bWJlcixcbiAgICAgICAgfSwgKCkgPT4ge1xuICAgICAgICAgICAgaWYgKGFjdGlvbkFmdGVyU2V0U3RhdGUpIHtcbiAgICAgICAgICAgICAgICBhY3Rpb25BZnRlclNldFN0YXRlKGRpc3BsYXlWYWx1ZSwgaXNvMik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjbGFzcy1tZXRob2RzLXVzZS10aGlzXG4gICAgcG9zc2libHlFbGltaW5hdGVaZXJvQWZ0ZXJDb3VudHJ5Q29kZShudW1iZXIpIHtcbiAgICAgICAgY29uc3QgZGlhbENvZGUgPSBQaG9uZU51bWJlci5nZXREaWFsQ29kZShudW1iZXIpO1xuICAgICAgICByZXR1cm4gbnVtYmVyLnN0YXJ0c1dpdGgoYCR7ZGlhbENvZGV9MGApXG4gICAgICAgICAgICA/IGRpYWxDb2RlICsgbnVtYmVyLnN1YnN0cihkaWFsQ29kZS5sZW5ndGggKyAxKVxuICAgICAgICAgICAgOiBudW1iZXI7XG4gICAgfVxuXG4gICAgZm9jdXMoKSB7XG4gICAgICAgIHRoaXMuaW5wdXRQaG9uZS5mb2N1cygpO1xuICAgIH1cblxuICAgIGJsdXIoKSB7XG4gICAgICAgIHRoaXMuaW5wdXRQaG9uZS5ibHVyKCk7XG4gICAgfVxuXG4gICAgcmVuZGVyKCkge1xuICAgICAgICBjb25zdCB7IGlzbzIsIGRpc3BsYXlWYWx1ZSwgZGlzYWJsZWQgfSA9IHRoaXMuc3RhdGU7XG4gICAgICAgIGNvbnN0IFRleHRDb21wb25lbnQ6IGFueSA9IHRoaXMucHJvcHMudGV4dENvbXBvbmVudCB8fCBUZXh0SW5wdXQ7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8VmlldyBzdHlsZT17W3N0eWxlcy5jb250YWluZXIsIHRoaXMucHJvcHMuc3R5bGVdfT5cbiAgICAgICAgICAgICAgICA8VG91Y2hhYmxlV2l0aG91dEZlZWRiYWNrXG4gICAgICAgICAgICAgICAgICAgIG9uUHJlc3M9e3RoaXMub25QcmVzc0ZsYWd9XG4gICAgICAgICAgICAgICAgICAgIGRpc2FibGVkPXtkaXNhYmxlZH1cbiAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgIDxJbWFnZVxuICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlPXtGbGFncy5nZXQoaXNvMil9XG4gICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT17W3N0eWxlcy5mbGFnLCB0aGlzLnByb3BzLmZsYWdTdHlsZV19XG4gICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgPC9Ub3VjaGFibGVXaXRob3V0RmVlZGJhY2s+XG4gICAgICAgICAgICAgICAgPFZpZXcgc3R5bGU9e3sgZmxleDogMSwgbWFyZ2luTGVmdDogdGhpcy5wcm9wcy5vZmZzZXQgfHwgMTAgfX0+XG4gICAgICAgICAgICAgICAgICAgIDxUZXh0Q29tcG9uZW50XG4gICAgICAgICAgICAgICAgICAgICAgICByZWY9eyhyZWYpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmlucHV0UGhvbmUgPSByZWY7XG4gICAgICAgICAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAgICAgICAgICAgZWRpdGFibGU9eyFkaXNhYmxlZH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGF1dG9Db3JyZWN0PXtmYWxzZX1cbiAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPXtbc3R5bGVzLnRleHQsIHRoaXMucHJvcHMudGV4dFN0eWxlXX1cbiAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlVGV4dD17KHRleHQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9uQ2hhbmdlUGhvbmVOdW1iZXIodGV4dCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAgICAgICAgICAga2V5Ym9hcmRUeXBlPVwicGhvbmUtcGFkXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIHVuZGVybGluZUNvbG9yQW5kcm9pZD1cInJnYmEoMCwwLDAsMClcIlxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e2Rpc3BsYXlWYWx1ZX1cbiAgICAgICAgICAgICAgICAgICAgICAgIHsuLi50aGlzLnByb3BzLnRleHRQcm9wc31cbiAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICA8L1ZpZXc+XG5cbiAgICAgICAgICAgICAgICA8Q291bnRyeVBpY2tlclxuICAgICAgICAgICAgICAgICAgICByZWY9eyhyZWYpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGlja2VyID0gcmVmO1xuICAgICAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZENvdW50cnk9e2lzbzJ9XG4gICAgICAgICAgICAgICAgICAgIG9uU3VibWl0PXt0aGlzLnNlbGVjdENvdW50cnl9XG4gICAgICAgICAgICAgICAgICAgIGJ1dHRvbkNvbG9yPXt0aGlzLnByb3BzLnBpY2tlckJ1dHRvbkNvbG9yfVxuICAgICAgICAgICAgICAgICAgICBjYW5jZWxUZXh0PXt0aGlzLnByb3BzLmNhbmNlbFRleHR9XG4gICAgICAgICAgICAgICAgICAgIGNhbmNlbFRleHRTdHlsZT17dGhpcy5wcm9wcy5jYW5jZWxUZXh0U3R5bGV9XG4gICAgICAgICAgICAgICAgICAgIGNvbmZpcm1UZXh0PXt0aGlzLnByb3BzLmNvbmZpcm1UZXh0fVxuICAgICAgICAgICAgICAgICAgICBjb25maXJtVGV4dFN0eWxlPXt0aGlzLnByb3BzLmNvbmZpcm1UZXh0U3R5bGV9XG4gICAgICAgICAgICAgICAgICAgIHBpY2tlckJhY2tncm91bmRDb2xvcj17dGhpcy5wcm9wcy5waWNrZXJCYWNrZ3JvdW5kQ29sb3J9XG4gICAgICAgICAgICAgICAgICAgIGl0ZW1TdHlsZT17dGhpcy5wcm9wcy5waWNrZXJJdGVtU3R5bGV9XG4gICAgICAgICAgICAgICAgICAgIG9uUHJlc3NDYW5jZWw9e3RoaXMucHJvcHMub25QcmVzc0NhbmNlbH1cbiAgICAgICAgICAgICAgICAgICAgb25QcmVzc0NvbmZpcm09e3RoaXMucHJvcHMub25QcmVzc0NvbmZpcm19XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDwvVmlldz5cbiAgICAgICAgKTtcbiAgICB9XG59XG4iXX0=